import yaml
from os import path
from . import util
from . import aws

class Config:
    _instance = None
    file_path:str

    def __new__(cls, file_path:str):
            if cls._instance is None:
                cls._instance = super(Config, cls).__new__(cls)
                if not path.isabs(file_path):
                    file_path = path.abspath(file_path)

                util.log(f"received config is {file_path}")
                cls._instance.file_path = file_path
                cls._instance.load_config_file()
                cls._instance.validate_config()

            return cls._instance
    
    @staticmethod
    def get_current():
        if Config._instance is None:
            raise Exception(f"Config is not initialized yet")
        
        return Config._instance

    def load_config_file(self):
        if path.isfile(self.file_path):
            with open(self.file_path, "r") as file:
                self.config = yaml.safe_load(file)
        else:
            raise Exception(f"{self.file_path} file not found")
    
    def validate_config(self):
        if "dynamodb_table" not in self.config:
            raise Exception(f"Config file should have dynamodb_table node")
        
        dynamodb_table = self.config["dynamodb_table"]
        if "table_name" not in dynamodb_table:
            raise Exception(f"Table should have a table_name node")
        
        table_name = dynamodb_table["table_name"]

        if "row_count" not in dynamodb_table:
            util.log(f"{table_name} row count set to 10")

        if "attributes" not in dynamodb_table:
            raise Exception(f"{table_name} table should have a attributes node")

        if len(dynamodb_table["attributes"]) == 0:
            raise Exception(f"{table_name} table should have at least 1 attribute")
        
        for attribute in dynamodb_table["attributes"]:
            if "name" not in attribute:
                raise Exception(f"{table_name} table have an attribute without a name")
        
            attr_name = attribute["name"]

            if "data" not in attribute:
                util.log(f"{table_name} table {attr_name} attribute data will be generated by fake.word()")
        
        util.log(f"config file is validated")

    def get_supported_data_types(self):
        return ["S", "N", "BOOL", "NULL"]

    def get_locale(self):
        if "config" in self.config and "locale" in self.config["config"]:
            return self.config["config"]["locale"]
        else:
            return "en_US"

    def get_on_item_insert_error(self):
        if "config" in self.config and "on_item_insert_error" in self.config["config"]:
            return self.config["config"]["on_item_insert_error"]
        else:
            return "RAISE_ERROR"

    def get_region(self):
        if "aws" in self.config and "region" in self.config["aws"]:
            return self.config["aws"]["region"]
        else:
            return None

    def get_profile(self):
        if "aws" in self.config and "profile" in self.config["aws"]:
            return self.config["aws"]["profile"]
        else:
            return "default"

    def get_table(self):
        return self.config["dynamodb_table"]["table_name"]

    def get_rowcount(self):
        if "dynamodb_table" in self.config and "row_count" in self.config["dynamodb_table"]:
            return self.config["dynamodb_table"]["row_count"]
        else:
            return 10
    
    def get_attributes(self):
        return self.config["dynamodb_table"]["attributes"]
